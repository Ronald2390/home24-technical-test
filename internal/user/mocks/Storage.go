// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "home24-technical-test/internal/user/model"

	mock "github.com/stretchr/testify/mock"

	public "home24-technical-test/internal/user/public"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, userID
func (_m *Storage) Delete(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, params
func (_m *Storage) FindAll(ctx context.Context, params *public.FindAllUsersParams) ([]*model.User, error) {
	ret := _m.Called(ctx, params)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(context.Context, *public.FindAllUsersParams) []*model.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *public.FindAllUsersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Storage) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, userID
func (_m *Storage) FindByID(ctx context.Context, userID int) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *Storage) Insert(ctx context.Context, _a1 *model.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, updatedUser
func (_m *Storage) Update(ctx context.Context, updatedUser *model.User) error {
	ret := _m.Called(ctx, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
