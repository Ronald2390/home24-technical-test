// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "home24-technical-test/internal/user/model"

	mock "github.com/stretchr/testify/mock"

	public "home24-technical-test/internal/user/public"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, userID, oldPassword, newPassword
func (_m *ServiceInterface) ChangePassword(ctx context.Context, userID int, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, userID, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) error); ok {
		r0 = rf(ctx, userID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, params
func (_m *ServiceInterface) CreateUser(ctx context.Context, params *public.CreateUserParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *public.CreateUserParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *ServiceInterface) DeleteUser(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoginSession provides a mock function with given fields: ctx, token
func (_m *ServiceInterface) GetLoginSession(ctx context.Context, token string) (*model.Session, error) {
	ret := _m.Called(ctx, token)

	var r0 *model.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *ServiceInterface) GetUser(ctx context.Context, userID int) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params
func (_m *ServiceInterface) ListUsers(ctx context.Context, params *public.FindAllUsersParams) ([]*model.User, error) {
	ret := _m.Called(ctx, params)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(context.Context, *public.FindAllUsersParams) []*model.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *public.FindAllUsersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, params
func (_m *ServiceInterface) Login(ctx context.Context, params *public.LoginParams) (*public.LoginResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *public.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *public.LoginParams) *public.LoginResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*public.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *public.LoginParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, token
func (_m *ServiceInterface) Logout(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, params
func (_m *ServiceInterface) UpdateUser(ctx context.Context, params *public.UpdateUserParams) (*model.User, error) {
	ret := _m.Called(ctx, params)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, *public.UpdateUserParams) *model.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *public.UpdateUserParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
